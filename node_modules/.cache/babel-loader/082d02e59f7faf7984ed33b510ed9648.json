{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/projects/todo-hooks/client/src/components/TaskWrapper/TaskWrapper.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskCreate from '../TaskCreate/TaskCreate';\nimport './TaskWrapper.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskWrapper() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n\n  const addTask = userInput => {\n    if (userInput) {\n      const newTodo = {\n        id: todos.length + 1,\n        text: userInput,\n        done: false,\n        like: false\n      };\n      setTodos([newTodo, ...todos]);\n    } else {\n      return todos;\n    }\n  };\n\n  const removeTask = id => {\n    setTodos([...todos.filter(item => item.id !== id)]);\n  };\n\n  const changeDone = () => {};\n\n  const changeLike = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(TaskCreate, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), todos.map(item => {\n      return /*#__PURE__*/_jsxDEV(Task, {\n        id: item.id,\n        text: item.text,\n        done: item.done,\n        like: item.like,\n        removeTask: removeTask\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskWrapper, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n\n_c = TaskWrapper;\nexport default TaskWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskWrapper\");","map":{"version":3,"sources":["/home/user/Desktop/projects/todo-hooks/client/src/components/TaskWrapper/TaskWrapper.js"],"names":["useState","Task","TaskCreate","TaskWrapper","todos","setTodos","addTask","userInput","newTodo","id","length","text","done","like","removeTask","filter","item","changeDone","changeLike","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,mBAAP;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMM,OAAO,GAAIC,SAAD,IAAe;AAC3B,QAAIA,SAAJ,EAAe;AACX,YAAMC,OAAO,GAAG;AAACC,QAAAA,EAAE,EAAEL,KAAK,CAACM,MAAN,GAAe,CAApB;AAAuBC,QAAAA,IAAI,EAAEJ,SAA7B;AAAwCK,QAAAA,IAAI,EAAE,KAA9C;AAAqDC,QAAAA,IAAI,EAAE;AAA3D,OAAhB;AACAR,MAAAA,QAAQ,CAAC,CAACG,OAAD,EAAU,GAAGJ,KAAb,CAAD,CAAR;AACH,KAHD,MAGO;AACH,aAAOA,KAAP;AACH;AACJ,GAPD;;AASA,QAAMU,UAAU,GAAIL,EAAD,IAAQ;AACvBJ,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAACW,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYA,EAAjC,CAAJ,CAAD,CAAR;AACH,GAFD;;AAIA,QAAMQ,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIF,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,OAAO,EAAEZ;AADX;AAAA;AAAA;AAAA;AAAA,YADF,EAIGF,KAAK,CAACe,GAAN,CAAUH,IAAI,IAAI;AACf,0BACI,QAAC,IAAD;AAEE,QAAA,EAAE,EAAEA,IAAI,CAACP,EAFX;AAGE,QAAA,IAAI,EAAEO,IAAI,CAACL,IAHb;AAIE,QAAA,IAAI,EAAEK,IAAI,CAACJ,IAJb;AAKE,QAAA,IAAI,EAAEI,IAAI,CAACH,IALb;AAME,QAAA,UAAU,EAAEC;AANd,SACOE,IAAI,CAACP,EADZ;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAXA,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA5CQN,W;;KAAAA,W;AA8CT,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport Task from '../Task/Task';\nimport TaskCreate from '../TaskCreate/TaskCreate';\nimport './TaskWrapper.css';\n\nfunction TaskWrapper() {\n\n    const [todos, setTodos] = useState([]);\n\n    const addTask = (userInput) => {\n        if (userInput) {\n            const newTodo = {id: todos.length + 1, text: userInput, done: false, like: false}\n            setTodos([newTodo, ...todos])\n        } else {\n            return todos\n        }\n    }\n\n    const removeTask = (id) => {\n        setTodos([...todos.filter(item => item.id !== id)])\n    }\n\n    const changeDone = () => {\n\n    }\n\n    const changeLike = () => {\n        \n    }\n \n  return (\n    <div className=\"task-wrapper\">\n      <TaskCreate\n        addTask={addTask}\n      />\n      {todos.map(item => {\n          return(\n              <Task\n                key={item.id}\n                id={item.id}\n                text={item.text}\n                done={item.done}\n                like={item.like}\n                removeTask={removeTask}\n              />\n          )\n      })}\n    </div>\n  );\n}\n\nexport default TaskWrapper;\n"]},"metadata":{},"sourceType":"module"}